import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { styled } from"@mui/material/styles";
import React, {HTMLAttributes, useState, useEffect, useRef} from "react";
import { Grid, Paper, PaperProps, Typography } from "@mui/material";
import Head from "next/head";
import { light } from "@mui/material/styles/createPalette";


function range(start: number, end: number): number[] {
  return Array.from({ length: end - start + 1 }, (_, i) => start + i);
}

export default function Home() {  //useStateの宣言 ホバーの真偽宣言
  const [hoveredRowId, setHoveredRowId] = useState<number>(0);
  const [hoveredColId, setHoveredColId] = useState<number>(0);
  const [hoverednextColId, setHoverednextColId] = useState<number>(0);
  const [hoverednextRowId, setHoverednextRowId] = useState<number>(0);
  const [hovered, setHovered] = useState<boolean>(false);

  const handleMouseEnter = (bannmenRowId:number, bannmenColId:number, nextbannmenColId:number, nextbannmenRowId: number) => {
    setHoveredRowId(bannmenRowId);
    setHoveredColId(bannmenColId);
    setHoverednextColId(nextbannmenColId);
    setHoverednextColId(nextbannmenRowId);
    if (nextbannmenColId==10){
      setHoveredColId(-1); //端が光らないように
    }
    if (nextbannmenRowId==19){
      setHoveredRowId(0); //端が光らないように
    }
    setHovered(true);
  };
  const handleMouseLeave = () => {
    setHoveredRowId(0);
    setHoveredColId(0);
    setHoverednextColId(0);
    setHoverednextRowId(0);
    setHovered(false);
  }

  interface LightSpacingWallProps extends PaperProps  {
    bannmenRowId: number;
    bannmenColId: number;
    nextbannmenColId: number;
    nextbannmenRowId: number;
  }
  interface StraightSpacingWallProps extends PaperProps  {
    bannmenRowId: number;
    bannmenColId: number;
    nextbannmenColId: number;
    nextbannmenRowId: number;
  }

  // palette作った方がいいよ
  const LightSpacingWall = styled(Paper, {shouldForwardProp: (prop) => prop !== 'bannmenId',
  })<LightSpacingWallProps>(({ bannmenRowId, bannmenColId }) => ({
    backgroundColor: hovered && bannmenRowId === hoveredRowId &&  (bannmenColId === hoveredColId || bannmenColId === hoveredColId+1 ) 
    ? "rgba(102, 102, 102, 0.5)" : "rgb(44, 26, 1)"  ,
    transition: 'background-color 9ms',
    transitionDelay: '9ms',
}))
const StraightSpacingWall = styled(Paper, {shouldForwardProp: (prop) => prop !== 'bannmenId',
})<StraightSpacingWallProps>(({ bannmenRowId, bannmenColId }) => ({
  backgroundColor: hovered && (bannmenRowId === hoveredRowId || bannmenRowId === hoveredRowId+2) && bannmenColId === hoveredColId 
  ? "rgba(102, 102, 102, 0.5)" : "rgb(44, 26, 1)",
  transition: 'background-color 9ms',
  transitionDelay: '9ms',
}))

useEffect(() => {
  const url = 'api/create'
  const board = "test"
  const user = "users"
  const postData = {
    board_name: board,
    user_name: user
  };
  const Options = {
    method: 'POST',
    headers: {
      "Content-Type": 'application/json'
    },
    body: JSON.stringify(postData)
  }
  fetch(url, Options)
  .then((response) => {
    try{
      if (response.status == 200){
        console.log(response.json())
        return response.json()
      } else {
        // setAlertAny(true)
      }
    } finally{
    //   const AlertAnySnack = () => setAlertAny(false)
    //   setTimeout( AlertAnySnack, 3200)
    }
  })
  .catch(err => console.log(err))
},[])


//Websocketの呼び出し
const socketRef = useRef<WebSocket>()
const [isConnected, setIsConnected] = useState<boolean>(false)

// useEffect(() => {
//   socketRef.current = new WebSocket("/api/ws")
//     socketRef.current.onopen = function () {
//       socketRef.current?.send(btoa(user + ':' + password))
//       setIsConnected(true)
//       console.log('Connected')
//     }

//     socketRef.current.onclose = function () {
//       console.log('closed')
//       setIsConnected(false)
//     }
 
// },[]

//)
    return (
      <>
        <Head>
          <title>Quoridor</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <Paper className={styles.dodai}>
            <Grid container 
              className={`${styles.relativeScale} ${styles.gridField}`}             
            >
              {range(1, 17).map((row) => (
                <Grid container item  
                  className={styles.banmenCenter}
                  key={row}
                >
                  {row % 2 === 0 
                  ? (range(1, 9).map((col) => (
                      ( col != 9
                        ? <Grid item   key={col}>
                            {/*横向き余白*/}
                            <div className={styles.banmeLightSpacing}>
                              <LightSpacingWall 
                              bannmenRowId={row}
                              bannmenColId={col}
                              nextbannmenColId={col+1}
                              nextbannmenRowId={row}
                              className={styles.banmeLightSpacingScale}
                              onMouseEnter={() => handleMouseEnter(row, col, col+1, row)}
                              onMouseLeave={handleMouseLeave}
                              >
                              </LightSpacingWall>
                                {/* 交差点余白 */}
                              <Paper className={styles.banmeCrossSpacingScale}>
                              </Paper>
                            </div>
                          </Grid>
                        : <Grid item   key={col}>
                            {/*横向き余白*/}
                            <div className={styles.banmeLightSpacing}>
                              <LightSpacingWall 
                              bannmenRowId={row}
                              bannmenColId={col}
                              nextbannmenColId={col+1}
                              nextbannmenRowId={row}
                              className={styles.banmeLightSpacingScale}
                              onMouseEnter={() => handleMouseEnter(row, col, col+1, row)}
                              onMouseLeave={handleMouseLeave}
                              >
                              </LightSpacingWall>
                            </div>
                          </Grid>
                      )
                    )))
                  : (range(1, 9).map((col) => (
                      ( col != 9
                        ? <Grid item   key={col}>
                            {/*盤目*/}
                            <div className={styles.banmeLightSpacing}>
                              <Paper className={styles.banmeScale}>
                              </Paper>
                                {/* 縦向き余白 */}
                              <StraightSpacingWall 
                              bannmenRowId={row}
                              bannmenColId={col}
                              nextbannmenColId={col}
                              nextbannmenRowId={row+2}
                              className={styles.banmeStraightSpacingScale}
                              onMouseEnter={() => handleMouseEnter(row, col, col, row+2)}
                              onMouseLeave={handleMouseLeave}
                              >
                              </StraightSpacingWall>
                            </div>
                          </Grid>
                        : <Grid item   key={col}>
                            {/*盤目*/}
                            <div className={styles.banmeLightSpacing}>
                              <Paper className={styles.banmeScale}>
                              </Paper>
                            </div>
                          </Grid>
                      )
                    )))
                  }
                </Grid>
              ))}
            </Grid>
          </Paper>
        </main>
      </>
    );
  }